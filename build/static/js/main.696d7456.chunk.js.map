{"version":3,"sources":["components/BorderCountries.js","components/CountryInfoStat.js","components/Flag.js","components/DetailView.js","components/Header.js","components/MiniCountryContainer.js","components/Home.js","App.js","reportWebVitals.js","index.js"],"names":["BorderCountries","props","borderCountries","data","length","borderCountryItems","map","country","className","CountryInfoStat","tag","join","d","name","Flag","src","flag","alt","width","DetailView","countryData","stats","key","push","onClick","callback","icon","faArrowLeft","countryname","bordercountries","Header","theme_switch","darkMode","id","faSun","faMoon","MiniCountryContainer","regions","Home","useState","region","setRegion","displayDropdown","setDisplayDropdown","dropdown_items","r","callRegion","countries","countriesData","viewCountryDetails","dropdown_text","faSearch","callName","document","getElementById","value","type","placeholder","e","faAngleDown","localStorage","getItem","setItem","console","log","App","setDarkMode","view","setView","undefined","setCountry","loading","setLoading","useRef","callApi","api_url","sessionStorage","fetch","Request","then","response","json","parsedJSON","borders","nativeName","population","subregion","capital","topLevelDomain","currencies","languages","JSON","stringify","window","location","reload","useEffect","current","parse","body","classList","add","remove","clear","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.696d7456.chunk.js","sourcesContent":["import './BorderCountries.css'\r\n\r\nfunction BorderCountries(props) {\r\n    const borderCountries = props.data;\r\n    if (borderCountries.length > 0) {\r\n        const borderCountryItems = borderCountries.map(country =>\r\n            <div key={country} className=\"item element shadow\">\r\n                {country}\r\n            </div>\r\n        );\r\n\r\n        return (\r\n            <div className=\"BorderCountries\">\r\n                <p><b>Border Countries:</b></p>\r\n                <div className=\"flex-container\">\r\n                    {borderCountryItems}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n    else\r\n        return null;\r\n}\r\n\r\nexport default BorderCountries;","function CountryInfoStat(props) {\r\n    const tag = props.tag;\r\n    let data = props.data;\r\n\r\n    if (data) {\r\n        if (tag === \"Top Level Domain\")\r\n            data = data.join(', ');\r\n        else if (tag === \"Currencies\" || tag === \"Languages\") {\r\n            data = data.map((d) => d.name);\r\n            data = data.join(', ');\r\n        }\r\n        return (\r\n            <p className=\"CountryInfoStat\">\r\n                <b>{tag}: </b>\r\n                <span>{data}</span>\r\n            </p>\r\n        );\r\n    }\r\n    else\r\n        return null;\r\n}\r\n\r\nexport default CountryInfoStat;","function Flag(props) {\r\n    return (\r\n        <div className=\"Flag\">\r\n            <img src={props.flag} alt=\"country flag\" width=\"100%\" />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Flag;","import './DetailView.css'\r\nimport BorderCountries from './BorderCountries'\r\nimport CountryInfoStat from './CountryInfoStat'\r\nimport Flag from './Flag';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faArrowLeft } from '@fortawesome/free-solid-svg-icons'\r\n\r\nfunction DetailView(props) {\r\n    const countryData = props.countryData;\r\n    let stats = [];\r\n    for (const key in countryData.stats) {\r\n        stats.push(\r\n            <CountryInfoStat key={key} tag={key} data={countryData.stats[key]} />\r\n        );\r\n        if (key === 'Capital') {\r\n            stats.push(\r\n                <p key=\"blankspace\" className=\"blankspace\">&nbsp;</p>\r\n            )\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"DetailView\">\r\n            <div className=\"element back-button shadow\" onClick={props.callback}>\r\n                <FontAwesomeIcon icon={faArrowLeft} />\r\n                &nbsp;\r\n            Back\r\n            </div>\r\n            <div className=\"country-info\">\r\n                <Flag flag={countryData.flag} />\r\n                <div className=\"country-stats\">\r\n                    <h1>{countryData.countryname}</h1>\r\n                    <div className=\"secondary-stats\">\r\n                        {stats}\r\n                    </div>\r\n                    <p>&nbsp;</p>\r\n                    <BorderCountries data={countryData.bordercountries} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DetailView;","import './Header.css'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faMoon, faSun } from '@fortawesome/free-solid-svg-icons'\r\n\r\nfunction Header(props) {\r\n    let theme_switch;\r\n    if (!props.darkMode) {\r\n        theme_switch = (\r\n            <div id=\"theme-switch\" onClick={props.callback}>\r\n                <FontAwesomeIcon icon={faMoon} />\r\n                &nbsp;\r\n                Dark Mode\r\n            </div>\r\n        );\r\n    }\r\n    else {\r\n        theme_switch = (\r\n            <div id=\"theme-switch\" onClick={props.callback}>\r\n                <FontAwesomeIcon icon={faSun} />\r\n                &nbsp;\r\n                Light Mode\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <header className=\"element\" id=\"header\">\r\n            <div id=\"header-title\">Where in the world?</div>\r\n            {theme_switch}\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header;","import CountryInfoStat from './CountryInfoStat';\r\nimport Flag from './Flag';\r\nimport './MiniCountryContainer.css'\r\n\r\nfunction MiniCountryContainer(props) {\r\n    const countryData = props.countryData;\r\n    return (\r\n        <div className=\"MiniCountryContainer element\" onClick={props.onClick}>\r\n            <Flag flag={countryData.flag} />\r\n            <div className=\"bottom\">\r\n                <h1>{countryData.countryname}</h1>\r\n                <CountryInfoStat tag={\"Population\"} data={countryData.stats[\"Population\"]} />\r\n                <CountryInfoStat tag={\"Region\"} data={countryData.stats[\"Region\"]} />\r\n                <CountryInfoStat tag={\"Capital\"} data={countryData.stats[\"Capital\"]} />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MiniCountryContainer;","import './Home.css'\r\nimport MiniCountryContainer from './MiniCountryContainer'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faSearch, faAngleDown } from '@fortawesome/free-solid-svg-icons'\r\nimport { useEffect, useState } from 'react'\r\n\r\nconst regions = [\"All\", \"Africa\", \"Americas\", \"Asia\", \"Europe\", \"Oceania\"];\r\n\r\nfunction Home(props) {\r\n    const [region, setRegion] = useState(\"All\");\r\n    const [displayDropdown, setDisplayDropdown] = useState(false);\r\n\r\n    const dropdown_items = (\r\n        <div className=\"dropdown-items element\">\r\n            {regions.map((r) =>\r\n                <div key={r} className=\"option\" onClick={() => {\r\n                    setRegion(r);\r\n                    props.callRegion(r);\r\n                }}>{r}</div>\r\n            )}\r\n        </div>\r\n    );\r\n\r\n    function toggleDropdown(event) {\r\n        if (!displayDropdown)\r\n            setDisplayDropdown(true);\r\n        else {\r\n            // TODO: Implement filtering\r\n            setDisplayDropdown(false);\r\n        }\r\n    }\r\n\r\n    const countries = props.countriesData.map((country) => (\r\n        <MiniCountryContainer key={country.countryname} countryData={country} onClick={() => { props.viewCountryDetails(country) }} />\r\n    ));\r\n\r\n    const dropdown_text = (region === \"All\") ? \"Filter by Region\" : \"Region: \" + region;\r\n\r\n    return (\r\n        <div className=\"Home\">\r\n            <div className=\"search-filter-container\">\r\n                <div className=\"search-input element shadow\">\r\n                    <FontAwesomeIcon icon={faSearch} onClick={() => {\r\n                        props.callName(document.getElementById('search').value);\r\n                    }} />\r\n                    <input type=\"text\" id=\"search\" placeholder=\"Search for a country...\" />\r\n                </div>\r\n                <div className=\"filter-dropdown element shadow\" onClick={(e) => {\r\n                    // e.stopPropagation();\r\n                    toggleDropdown(e);\r\n                }}>\r\n                    <div className=\"filter-dropdown-text\">\r\n                        {dropdown_text}\r\n                    </div>\r\n                    <FontAwesomeIcon icon={faAngleDown} />\r\n                    {displayDropdown && dropdown_items}\r\n                </div>\r\n            </div>\r\n            <div className=\"countries-container\">\r\n                {countries}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Home;","/* \nSite does not work on first load, but works on reload.\nThis is because session storage is set and data loads properly on reload.\nI don't know how to fix it.\n*/\n\nimport { useEffect, useRef, useState } from 'react';\nimport './App.css';\nimport DetailView from './components/DetailView';\nimport Header from './components/Header';\nimport Home from './components/Home';\n\n// store theme in local storage (does not expire)\nif (!localStorage.getItem('darkMode')) {\n  localStorage.setItem('darkMode', 1);\n  console.log(\"Set initial Local Storage for darkMode!\")\n}\n\n// this ONLY works if outside of the function\n// I assume the asynchronous stuff and rerendering causes this\n// let countriesData;\n\nfunction App() {\n  // state\n  const [darkMode, setDarkMode] = useState(localStorage.getItem('darkMode') === '1');\n  const [view, setView] = useState('home');\n  const [country, setCountry] = useState(undefined);\n  const [loading, setLoading] = useState(true);\n\n  const countriesData = useRef(undefined);\n  console.log('');\n  console.log(\"RUNNING APP\")\n\n  // componentDidMount + componentDidUpdate for loading\n  useEffect(() => {\n    // I'd like to call this only once\n    callApi('https://restcountries.eu/rest/v2/all');\n\n    if (!countriesData.current)\n      countriesData.current = JSON.parse(sessionStorage.getItem('apiCall'));\n    console.log(\"IN USEEFFECT FOR LOADING\");\n    console.log(countriesData);\n\n    // setting state in its own update function sounds like a bad idea\n    setLoading(false);\n  }, [loading])\n\n  // componentDidMount + componentDidUpdate for darkMode\n  useEffect(() => {\n    if (darkMode) {\n      document.body.classList.add('darkMode');\n      document.body.classList.remove('lightMode');\n      localStorage.setItem('darkMode', 1);\n    }\n    else {\n      document.body.classList.add('lightMode')\n      document.body.classList.remove('darkMode');\n      localStorage.setItem('darkMode', 0);\n    }\n\n    // only run if darkMode is updated (when theme button is clicked)\n  }, [darkMode]);\n\n  function callApi(api_url) {\n    // store api results in session storage (expires when tab is closed)\n    if (!sessionStorage.getItem('apiCall')) {\n      // fetch(new Request('https://restcountries.eu/rest/v2/lang/es'))\n      fetch(new Request(api_url))\n        .then(response => response.json())\n        .then(parsedJSON => {\n          const data = parsedJSON.map((country) => {\n            return {\n              countryname: country.name,\n              bordercountries: country.borders,\n              flag: country.flag,\n              stats: {\n                \"Native Name\": country.nativeName,\n                \"Population\": country.population,\n                \"Region\": country.region,\n                \"Sub Region\": country.subregion,\n                \"Capital\": country.capital,\n                \"Top Level Domain\": country.topLevelDomain,\n                \"Currencies\": country.currencies,\n                \"Languages\": country.languages\n              }\n            };\n          })\n          sessionStorage.setItem('apiCall', JSON.stringify(data));\n          console.log(\"Set initial Session Storage for apiCall!\")\n\n          //obviously a hack to make it work for the first page load\n          window.location.reload()\n        });\n    }\n    else {\n      console.log(\"API data already exists!\");\n    }\n  }\n\n  function viewCountryDetails(data) {\n    setView('details');\n    setCountry(data);\n  }\n  function callRegion(data) {\n    sessionStorage.clear();\n    if (data === \"All\")\n      callApi(`https://restcountries.eu/rest/v2/all`);\n    else\n      callApi(`https://restcountries.eu/rest/v2/region/${data}`);\n  }\n  function callName(data) {\n    sessionStorage.clear();\n    callApi(`https://restcountries.eu/rest/v2/name/${data}`);\n  }\n  function callbackDetailView() {\n    setView('home');\n    setCountry(undefined);\n  }\n\n  if (loading) {\n    return <h1>Loading...</h1>;\n  }\n  else {\n    console.log(\"RENDERING\");\n    return (\n      <div className=\"App\">\n        <Header darkMode={darkMode} callback={() => { setDarkMode(!darkMode) }} />\n        {view === 'home' && <Home countriesData={countriesData.current} viewCountryDetails={viewCountryDetails} callRegion={callRegion} callName={callName} />}\n        {view === 'details' && <DetailView countryData={country} callback={callbackDetailView} />}\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n  // const countryData = {\n  //   countryname: \"Belgium\",\n  //   stats: {\n  //     \"Native Name\": \"Belgie\",\n  //     \"Population\": \"11,319,511\",\n  //     \"Region\": \"Europe\",\n  //     \"Sub Region\": \"Western Europe\",\n  //     \"Capital\": \"Brussels\",\n  //     \"Top Level Domain\": \".be\",\n  //     \"Currencies\": [\"Euro\"],\n  //     \"Languages\": [\"Dutch\", \"French\", \"German\"]\n  //   },\n  //   bordercountries: [\"France\", \"Germany\", \"Netherlands\"]\n  // }","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}